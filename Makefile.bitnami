# This sets up and handles the bitnami server, that is the LAMP +
# Mediawiki stack.

#################### VARIABLES ####################
BMW_MYSQL_USER=csail
BMW_MYSQL_PASS=pass
BMW_MYSQL_DB=bitnami_mediawiki
BMW_MYSQL_ROOT_PASS=mysqlpass
BMW_MYSQL_PORT=3307

MYSQL=$(FILESYSTEM_ROOT)/mysql/bin/mysql
MYSQL_CMD=$(MYSQL) -u $(BMW_MYSQL_USER) --password=$(BMW_MYSQL_PASS) $(BMW_MYSQL_DB) --force
BMWCTRL=$(FILESYSTEM_ROOT)/ctlscript.sh

BMW_TARGETS=$(MYSQL) $(BMWCTRL)

MEDIAWIKI_ROOT=$(FILESYSTEM_ROOT)/apps/mediawiki

bitnami-mediawiki.run-raw-url=https://bitnami.com/redirect/to/27493/bitnami-mediawiki-1.21.3-0-linux-x64-installer.run
RAW_PROJECTS += bitnami-mediawiki.run


#################### TARGETS ####################
# ~~~~~~~~ BitnamiWikiMedia ~~~~~~~~~~

$(BMW_TARGETS): bmw-install

$(MYSQL): bmw-install

bmw-install : $(BMWCTRL)

$(BMWCTRL): bmw-kill bitnami-mediawiki.run | $(FILESYSTEM_ROOT) $(DRAFTS_DIR)
	chmod a+x $(DRAFTS_DIR)/raw-bitnami-mediawiki.run
	cd $(FILESYSTEM_ROOT) && \
	$(DRAFTS_DIR)/raw-bitnami-mediawiki.run --prefix $(FILESYSTEM_ROOT) \
		--optionfile $(DATA_DIR)/bitnami-mediawiki.setup \
		--mysql_database_username $(BMW_MYSQL_USER) \
		--mysql_database_password $(BMW_MYSQL_PASS) \
		--mysql_database_name $(BMW_MYSQL_DB) \
		--mysql_password $(BMW_MYSQL_ROOT_PASS) \
		--mode unattended \
		--mysql_port $(BMW_MYSQL_PORT)

bmw-run: $(BMWCTRL)
	if [ -e "$$(ps aux | grep 'mysq[l]')" ]; then \
		echo "already running mysql"; \
	else \
		$(BMWCTRL) start; \
	fi

bmw-kill:
	if [ -x $(BMWCTRL) ] ; then \
		$(BMWCTRL) stop; \
	else \
		killall httpd mysqld.bin || echo "Nothing was running..." ; \
	fi

bmw-restart: $(BMWCTRL)
	$(BMWCTRL) restart

bmw-uninstall: bmw-kill
	[ ! -x $(FILESYSTEM_ROOT)/uninstall ] || $(FILESYSTEM_ROOT)/uninstall --mode unattended
	rm -rf $(FILESYSTEM_ROOT)

# ~~~~~~~~~~ MySQL ~~~~~~~~~~
mysql-shell: $(MYSQL) bmw-run
	$(MYSQL_CMD)

mysql-clear: bmw-run
	$(DATA_DIR)/sql-clear.sh $(BMW_MYSQL_USER) $(BMW_MYSQL_PASS) $(BMW_MYSQL_DB) $(MYSQL)


############################ OBSOLETE ################################
# From here on everything should work but we do not use this the huge#
# xml anymore. see Makefile.smartdumps for the right way of doing it.#
######################################################################

# This was too expensive and trivial to be run every time. Just be sure to run it once
$(DRAFTS_DIR)/dumps_line_count: $(WIKIPEDIA_DUMPS)
	wc -l $(WIKIPEDIA_DUMPS) | tail -1 | awk '{print $$1}' > $@

# WARNING: OBSOLETE
DUMP_LINES=$(shell cat $(DRAFTS_DIR)/dumps_line_count)
.PHONY:
mysql-dump-info: $(DRAFTS_DIR)/dumps_line_count
	@echo "Files to be imported:"
	$(foreach var, $(WIKIPEDIA_DUMPS), @echo "$(shell ls -lh $(var) | awk '{print $$5,$$9}')")
	@echo "Total lines to be imported: $(DUMP_LINES)"

# WARNING: OBSOLETE
# XXX: the dumps do not drop tables before adding themselves so have that in mind.
DEBUG_INTERVAL=50
.PHONY:
mysql-load: $(WIKIPEDIA_DUMPS) $(MYSQL) bmw-run mysql-clear mysql-dump-info $(DRAFTS_DIR)/dumps_line_count
	@echo "Loading data to mysql..."
	@echo "Line from total, line in file, last command time, total time, filename"
	awk  'BEGIN{ot=systime(); i=0}{if (NR%$(DEBUG_INTERVAL) == 0) {ct=systime(); printf " %d/$(DUMP_LINES) %ds %ds %s\n", NR, ct-pt, ct-ot, FILENAME ; pt=ct;} print | "$(MYSQL_CMD)"}' $(WIKIPEDIA_DUMPS)


.PHONY:
mysql-load-php: wikipedia-dump-xml
	$(FILESYSTEM_ROOT)/php/bin/php $(FILESYSTEM_ROOT)/apps/mediawiki/htdocs/maintenance/importDump.php \
		--conf $(FILESYSTEM_ROOT)/apps/mediawiki/htdocs/LocalSettings.php \
		$(SOURCES_DIR)/wikipedia-dump.xml-bz/wikipedia-dump.xml $(BMW_MYSQL_DB)



MW_EXTENSIONS_DIR = $(FILESYSTEM_ROOT)/apps/mediawiki/htdocs/extensions

# I learned the hard way that to debug this code the best way is to
# not use your production LocalSettings.php. Use a test file
# instead. 'It's a simple line of shell code' still counts as a fix...

# MW_LOCALCONF = ./test
MW_LOCALCONF = $(FILESYSTEM_ROOT)/apps/mediawiki/htdocs/LocalSettings.php

$(MW_LOCALCONF):
	@echo "Warning: I shouldn't have to create $(MY_LOCALCONF) unless it's for testing."
	touch $@

$(DRAFTS_DIR)/%-mwext.tar.gz:
	@echo "Downloading mediawiki extension mw-$*-url=$(mw-$*-url)"
	wget $(mw-$*-url) -O $@

$(MW_EXTENSIONS_DIR)/%/: $(DRAFTS_DIR)/%-mwext.tar.gz
	@echo "Installing mediawiki extension $*"
	mkdir $@
	tar -xzf $< -C $@

.PHONY:
mw-backup-localconf: $(MW_LOCALCONF)
	@echo "Backup of localconf... To revert try something like"
	@echo "\tcp $(MW_LOCALCONF).xxxxxx_bak $(MW_LOCALCONF)"
	cp $(MW_LOCALCONF) $(MW_LOCALCONF).$$(date +%s)_bak

# Note that this is not to be used too much. You are not add/removing
.PHONY:
mw-%-disable: mw-backup-localconf
	@echo "Disabling mediawikie extensions $*"
	mkfifo /tmp/fifo
	cat $(MW_LOCALCONF) | (awk "BEGIN{valid=1} /# $*/{valid=0} {if (valid) print} /# \/$*/{valid=1}" && echo 1 > /tmp/fifo) | (cat /tmp/fifo > /dev/null && (cat > $(MW_LOCALCONF)))
	rm /tmp/fifo

.PHONY:
mw-%-enable: %-is-a-registered-extension mw-backup-localconf $(MW_EXTENSIONS_DIR)/%/
	@echo "Enabling mediawiki extension $*"
	if ! grep -F "# $*" $(MW_LOCALCONF); then \
		file_php="$$(cd $(MW_EXTENSIONS_DIR)/../ && ls extensions/$*/*/$(mw-$*-php))"; \
		echo '' >> $(MW_LOCALCONF); \
		echo '# $*' >> $(MW_LOCALCONF); \
		echo "require_once \"\$$IP/$$file_php\";" >> $(MW_LOCALCONF); \
		echo $(mw-$*-config) >> $(MW_LOCALCONF); \
		echo '# /$*' >> $(MW_LOCALCONF); \
	fi

include Makefile.mwextensions

.PHONY:
mw-extensions: $(MW_EXTENSIONS:%=mw-%-enable)

# A hack I personally find pretty cute to avoid registering
# nonexistent extensions.
.PHONY:
$(MW_EXTENSIONS:%=%-is-a-registered-extension):
	@echo "Your extension seems to be registered."

.PHONY:
mw-%-clean: mw-%-disable
	rm -rf $(DRAFTS_DIR)/$(@:mw-%-clean=%)-mwext.tar.gz $(MW_EXTENSIONS_DIR)/$(@:mw-%-clean=%)/

mw-print-registered-extensions:
	@echo "$(MW_EXTENSIONS)"

mw-%-reinstall: mw-%-clean mw-%enable
